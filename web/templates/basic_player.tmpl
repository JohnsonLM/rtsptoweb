<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>RTSPtoWeb WebRTC example</title>
  </head>
  <body>
    <h1>RTSPtoWeb WebRTC example</h1>
    <video
      width="800px"
      id="webrtc-video-1"
      autoplay
      muted
      playsinline
      style="max-width: 100%; max-height: 100%"
    ></video>
    <video
      width="800px"
      id="webrtc-video-2"
      autoplay
      muted
      playsinline
      style="max-width: 100%; max-height: 100%"
    ></video>
    <video
      width="800px"
      id="webrtc-video-3"
      autoplay
      muted
      playsinline
      style="max-width: 100%; max-height: 100%"
    ></video>
    <video
      width="800px"
      id="webrtc-video-4"
      autoplay
      muted
      playsinline
      style="max-width: 100%; max-height: 100%"
    ></video>
    <audio controls id="webrtc-audio-1" autoplay></audio>
    <video
      width="800px"
      id="webrtc-video-4"
      autoplay
      muted
      playsinline
      style="max-width: 100%; max-height: 100%"
    ></video>

    <script>
      document.addEventListener("DOMContentLoaded", function () {
        function startPlay(videoEl, url) {
          const webrtc = new RTCPeerConnection({
            iceServers: [
              {
                urls: ["stun:stun.l.google.com:19302"],
              },
            ],
            sdpSemantics: "unified-plan",
          });

          webrtc.ontrack = function (event) {
            console.log(event.streams.length + " track is delivered");
            videoEl.srcObject = event.streams[0];
            videoEl.play();
          };

          webrtc.addTransceiver("video", { direction: "sendrecv" });

          webrtc.onnegotiationneeded =
            async function handleNegotiationNeeded() {
              let offer = await webrtc.createOffer();
              await webrtc.setLocalDescription(offer);

              fetch(url, {
                method: "POST",
                headers: {
                  "content-type":
                    "application/x-www-form-urlencoded; charset=UTF-8",
                  "cache-control": "no-cache",
                },
                body: `data=${btoa(webrtc.localDescription.sdp)}`,
              })
                .then((response) => response.text())
                .then((data) => {
                  try {
                    webrtc.setRemoteDescription(
                      new RTCSessionDescription({
                        type: "answer",
                        sdp: atob(data),
                      })
                    );
                  } catch (e) {
                    console.warn(e);
                  }
                });
            };

          const webrtcSendChannel = webrtc.createDataChannel(
            "rtsptowebSendChannel"
          );

          webrtcSendChannel.onopen = (event) => {
            console.log(`${webrtcSendChannel.label} has opened`);
            webrtcSendChannel.send("ping");
          };

          webrtcSendChannel.onclose = (_event) => {
            console.log(`${webrtcSendChannel.label} has closed`);
            startPlay(videoEl, url);
          };

          webrtcSendChannel.onmessage = (event) => console.log(event.data);
        }
        function startAudioPlay(videoEl, url) {
    const webrtc = new RTCPeerConnection({
      iceServers: [
        {
          urls: ["stun:stun.l.google.com:19302"],
        },
      ],
      sdpSemantics: "unified-plan",
    });

    webrtc.ontrack = function (event) {
      console.log(event.streams.length + " track is delivered");
      videoEl.srcObject = event.streams[0];
      videoEl.play();
    };

    webrtc.addTransceiver("audio", { direction: "sendrecv" });

    webrtc.onnegotiationneeded = async function handleNegotiationNeeded() {
      let offer = await webrtc.createOffer();
      await webrtc.setLocalDescription(offer);

      fetch(url, {
        method: "POST",
        headers: {
          "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
          "cache-control": "no-cache",
        },
        body: `data=${btoa(webrtc.localDescription.sdp)}`,
      })
        .then((response) => response.text())
        .then((data) => {
          try {
            webrtc.setRemoteDescription(
              new RTCSessionDescription({ type: "answer", sdp: atob(data) })
            );
          } catch (e) {
            console.warn(e);
          }
        });
    };

    const webrtcSendChannel = webrtc.createDataChannel("rtsptowebSendChannel");

    webrtcSendChannel.onopen = (event) => {
      console.log(`${webrtcSendChannel.label} has opened`);
      webrtcSendChannel.send("ping");
    };

    webrtcSendChannel.onclose = (_event) => {
      console.log(`${webrtcSendChannel.label} has closed`);
      startAudioPlay(videoEl, url);
    };

    webrtcSendChannel.onmessage = (event) => console.log(event.data);
  }

        startAudioPlay(
          document.querySelector("#webrtc-audio-1"),
          "http://localhost:8083/audio/webrtc/"
        );
        startPlay(
          document.querySelector("#webrtc-video-1"),
          "http://localhost:8083/stream/demo1/channel/0/webrtc?uuid=demo1&channel=0?token=test"
        );
        startPlay(
          document.querySelector("#webrtc-video-2"),
          "http://localhost:8083/stream/c1b1d253-6ec0-4f17-80af-6025b39416cd/channel/0/webrtc?uuid=demo1&channel=0?token=test"
        );
        startPlay(
          document.querySelector("#webrtc-video-3"),
          "http://localhost:8083/stream/20476a74-6797-4d57-9dca-d92037ec39d1/channel/0/webrtc?uuid=demo1&channel=0?token=test"
        );
        startPlay(
          document.querySelector("#webrtc-video-4"),
          "http://localhost:8083/stream/4b8ef8e5-1113-416a-b2ef-a55314f84df8/channel/0/webrtc?uuid=demo1&channel=0?token=test"
        );
      });
    </script>
  </body>
</html>
