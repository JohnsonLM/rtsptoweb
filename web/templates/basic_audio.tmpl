<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>RTSPtoWeb WebRTC Audio example</title>
  </head>
  <body>
    <h1>RTSPtoWeb WebRTC Audio example</h1>
    <audio controls id="webrtc-audio-1" autoplay></audio>

    <script>
      document.addEventListener("DOMContentLoaded", function () {
        function startAudioPlay(videoEl, url) {
          const webrtc = new RTCPeerConnection({
            iceServers: [
              {
                urls: ["stun:stun.l.google.com:19302"],
              },
            ],
            sdpSemantics: "unified-plan",
          });

          webrtc.ontrack = function (event) {
            console.log(event.streams.length + " track is delivered");
            videoEl.srcObject = event.streams[0];
            videoEl.play();
          };

          webrtc.addTransceiver("audio", { direction: "sendrecv" });

          webrtc.onnegotiationneeded = async function handleNegotiationNeeded() {
            let offer = await webrtc.createOffer();
            await webrtc.setLocalDescription(offer);

            fetch(url, {
              method: "POST",
              headers: {
                "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
                "cache-control": "no-cache",
              },
              body: `data=${btoa(webrtc.localDescription.sdp)}`,
            })
              .then((response) => response.text())
              .then((data) => {
                try {
                  webrtc.setRemoteDescription(
                    new RTCSessionDescription({ type: "answer", sdp: atob(data) })
                  );
                } catch (e) {
                  console.warn(e);
                }
              });
          };

          const webrtcSendChannel = webrtc.createDataChannel("rtsptowebSendChannel");

          webrtcSendChannel.onopen = (event) => {
            console.log(`${webrtcSendChannel.label} has opened`);
            webrtcSendChannel.send("ping");
          };

          webrtcSendChannel.onclose = (_event) => {
            console.log(`${webrtcSendChannel.label} has closed`);
            startAudioPlay(videoEl, url);
          };

          webrtcSendChannel.onmessage = (event) => console.log(event.data);
        }

        startAudioPlay(
          document.querySelector("#webrtc-audio-1"),
          "http://localhost:8083/audio/webrtc/"
        );
      });
    </script>
  </body>
</html>
